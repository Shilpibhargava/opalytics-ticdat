MODEL:
!-------------- Begin data initialization section ------------------- ;
! Get ticdat style set declarations for the interface;
@FILE("ticdat_fleethd.lng")
!;

SETS:
! Internal sets not visible to outside world;
 VXLXCXC( inp_vehicles, inp_load_transit):
  X,      ! Number vehicles used(0 or 1) by type, on this load;
  PC;     ! Profit contribution by type, Load;
ENDSETS

! Get ticdat style data input;
@FILE("ticdat_fleethd.ldt")


DATA:
! Synonyms: with original model and ticdat names;
!   CITY = inp_city;
!   LOAD = inp_load;
!   VTYPE = inp_vehicles;
!   VXC = inp_available;
!   LXCXC = inp_load_transit;
!   VXLXCXC = inp_travel;
   PC = 0;  ! Profit contribution per loaded vehicle;
 ENDDATA
!-------------- end data initialization section --------------------- ;

!-------------- start core mathematics section ---------------------- ;
SETS:
! Create set of interesting deadhead moves;
! After finishing load &2 from &3 to &4,
   a deadhead from &4 to &6 is useful in carrying
  load &5 if it gets there in time;
 VLCCLCC( inp_vehicles, inp_load_transit, inp_load_transit)| 
     inp_load_transit_departure_time(&2,&3,&4)+inp_travel_loaded_time(&1,&3,&4)+inp_travel_deadhead_time(&1,&4,&6)#LE# inp_load_transit_departure_time(&5,&6,&7):
   XDH;   ! Number vehicles deadheading empty, after doing load L1
             to next do load L2;

! Create set of initial deadhead moves. Assume time starts at 0;
 VCLCC( inp_vehicles, inp_city, inp_load_transit)| inp_travel_deadhead_time(&1,&2,&4) #LE# inp_load_transit_departure_time(&3,&4,&5):
           XI; ! Number vehicles of type &1 initially at &2 that
                 deadhead to carry load &3 from &4 to &5;
ENDSETS
! Variables:
    X( V, L, I, J) = 1 if a vehicle of type V carries load L from
                     city I to city J,
   XDH(V,L1,I1,J1,L2,I2,J2) = 1 if the vehicle of type V that carried
                    load L1 from city I1 to city J1, then deheads from
                    city J1 to city I2 to carry load L2 from I2 to J2,
    XI(V, J1, L2, I2, J2) = 1 if a vehicle of type V initially at city
                            J1, deadheads to I2 to carry load L2 from I2 to J2;

!-------------------------------------------------------------------;
! Maximize profit contribution from LOADs minus
   overhead cost of vehicles in fleet;
 MAX = @SUM(VXLXCXC( V, L, I, J): PC(V,L,I,J) * X(V,L,I,J)) 
     - @SUM(VCLCC(V1,J1,L1,I2,J2): inp_vehicles_fixed_cost(V1) * XI( V1,J1,L1,I2,J2)); 
    
!  Each load must be carried by some vehicle;
  @FOR( inp_load_transit( L, I, J):
   [MUST] @SUM(VXLXCXC( V, L, I, J): X(V,L,I,J)) = 1;
      );

 ! If vehicle type V carries the load, we must get it from an
    initial reposition move, or a deadhead after some other load;
  @FOR(VXLXCXC( V, L, I, J):
    [FLIN] @SUM(VCLCC(V,J1,L,I,J): XI( V,J1,L,I,J)) +
         @SUM(VLCCLCC(V,L1,I1,J1,L,I,J):
           XDH(V,L1,I1,J1,L,I,J)) = X(V,L,I,J);
        );

 ! We cannot use more vehicles at the end of a load than delivered the load;
   @FOR(VXLXCXC( V, L, I, J):
     [FOUT] X(V,L,I,J) >= @SUM(VLCCLCC(V,L,I,J,L2,I2,J2):
                             XDH(V,L,I,J,L2,I2,J2)) 
        );

! Cannot start with more vehicles than available;
   @FOR( inp_available( V, I): 
    [INIT] @SUM( VCLCC( V, I, L, I2, J2): XI(V,I,L,I2,J2)) <= inp_available_number_vehicles(V,I);
       ); 

! Total fleet size constraint for each vehicle type;
  @FOR( inp_vehicles(V):
      @SUM( VCLCC( V, I, L, I2, J2): XI(V,I,L,I2,J2)) <= inp_vehicles_fixed_size(V) );

! Fractional vehicles are not allowed;
     @FOR(VXLXCXC( V, L, I, J): @GIN( X(V,L,I,J))); 
     @FOR(VCLCC(V,J,L,I,J):     @GIN( XI( V,J,L,I,J)));
!-------------- end core mathematics section ------------------------ ;

!-------------- begin ticdat output section  ------------------------ ;
@FILE("ticdat_fleethd_output.ldt")

END
!-------------- end ticdat output section    ------------------------ ;